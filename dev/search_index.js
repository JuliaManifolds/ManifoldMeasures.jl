var documenterSearchIndex = {"docs":
[{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [ManifoldMeasures]","category":"page"},{"location":"reference/#ManifoldMeasures.AngularCentralGaussian","page":"Reference","title":"ManifoldMeasures.AngularCentralGaussian","text":"AngularCentralGaussian(M; params...)\n\nThe Angular Central Gaussian (ACG) distribution on the manifold M.\n\nAccepted manifolds are Sphere, ProjectiveSpace, Stiefel, Grassmann, Rotations and SpecialOrthogonal.\n\nFor manifolds with matrix points, this is also called the Matrix Angular Central Gaussian distribution.\n\nConstructors\n\nAngularCentralGaussian(M; Œ£‚Åª¬π)\nAngularCentralGaussian(M; L)\n\nFor a manifold M  ùîΩ^n  k, construct the ACG distribution parameterized either by the inverse of an n  n positive definite matrix Œ£ or by its lower Cholesky factor L, such that Œ£ = L L^mathrmT.\n\n\n\n\n\n","category":"type"},{"location":"reference/#ManifoldMeasures.Bingham","page":"Reference","title":"ManifoldMeasures.Bingham","text":"Bingham(M; params...)\n\nThe Bingham distribution on the manifold M.\n\nAccepted manifolds are Sphere, ProjectiveSpace, Stiefel, Grassmann, Rotations and SpecialOrthogonal.\n\nFor manifolds with matrix points, this is also called the Matrix Bingham distribution.\n\nConstructors\n\nBingham(M; A)\n\nFor a manifold M  ùîΩ^n  k, construct the Bingham distribution parameterized by some positive definite matrix A  ùîΩ^n  n.\n\nThe density function with respect to the normalized Hausdorff measure on M is\n\np(x  A) = fracexp(Rex Ax)_1 F_1(frack2 fracn2 A)\n\nwhere  is the Frobenius inner product, and _1 F_1(a b A) is a hypergeometric function with matrix argument A.\n\nNote that p(x  A + Œ± I) = p(x  A) for all scalars Œ±  ùîΩ. Hence, A can not be uniquely identified from draws from the Bingham distribution.\n\n\n\n\n\n","category":"type"},{"location":"reference/#ManifoldMeasures.Fisher","page":"Reference","title":"ManifoldMeasures.Fisher","text":"Fisher(; params...) = VonMisesFisher(Sphere(2); params...)\n\nThe Fisher distribution on the 2-Sphere.\n\n\n\n\n\n","category":"type"},{"location":"reference/#ManifoldMeasures.Haar","page":"Reference","title":"ManifoldMeasures.Haar","text":"Haar{G,D}\n\nThe Haar measure on a group manifold.\n\nThe Haar measure on a group G is a measure that is invariant to all left- and/or right- group translations on the manifold. That is, given the œÑ-invariant Haar measure Œº and some subset H  G, then _H mathrmdŒº(p) = _H mathrmdŒº(œÑ_q(p)) for all q  G, where œÑ_q(p) is group translation of p by q in the œÑ direction (left- or right-).\n\nThe convenient aliases LeftHaar and RightHaar are also provided.\n\nConstructors\n\nHaar(G::AbstractManifold, D::ActionDirection = LeftAction())\n\nConstruct the D-invariant Haar measure on group manifold G.\n\n\n\n\n\n","category":"type"},{"location":"reference/#ManifoldMeasures.Hausdorff","page":"Reference","title":"ManifoldMeasures.Hausdorff","text":"Hausdorff{M,A} <: PrimitiveMeasure\n\nThe un-normalized Hausdorff measure on a manifold.\n\nThe Hausdorff measure generalizes the notion of area or volume to a manifold that is embedded in a metric space. That is, the mass of the measure over some region of the manifold is the area/volume of that region in the embedded space.\n\nConstructors\n\nHausdorff(M::AbstractManifold)\n\nConstructs the Hausdorff measure for the manifold M using the default embedding of the manifold.\n\n\n\n\n\n","category":"type"},{"location":"reference/#ManifoldMeasures.LeftHaar","page":"Reference","title":"ManifoldMeasures.LeftHaar","text":"LeftHaar{G<:AbstractManifold}\n\nAlias for a left-Haar measure.\n\n\n\n\n\n","category":"type"},{"location":"reference/#ManifoldMeasures.RightHaar","page":"Reference","title":"ManifoldMeasures.RightHaar","text":"RightHaar{G<:AbstractManifold}\n\nAlias for a right-Haar measure.\n\n\n\n\n\n","category":"type"},{"location":"reference/#ManifoldMeasures.VonMises","page":"Reference","title":"ManifoldMeasures.VonMises","text":"VonMises(ùîΩ=‚Ñù; params...)\n\nThe von Mises distribution on the real or complex Circle.\n\nThis is just a convenient alias for VonMisesFisher(Circle(ùîΩ); params...).\n\nConstructors\n\nVonMises(Œº=œÄ, Œ∫=1)\nVonMises(‚ÑÇ; Œº=im, Œ∫=1)\nVonMises(‚ÑÇ; c=3+4im)\n\n\n\n\n\n","category":"type"},{"location":"reference/#ManifoldMeasures.VonMisesFisher","page":"Reference","title":"ManifoldMeasures.VonMisesFisher","text":"VonMisesFisher(M; params...)\n\nThe von Mises-Fisher (vMF) distribution on the Sphere, Stiefel, Rotations, or SpecialOrthogonal manifold M.\n\nConstructors\n\nVonMisesFisher(M::AbstractSphere{ùîΩ}; c)\nVonMisesFisher(M::AbstractSphere{ùîΩ}; Œº, Œ∫)\n\nConstruct the vMF distribution on the Sphere parameterized either by the mean/modal direction Œº  ùîΩùïä‚Åø and concentration Œ∫  ‚Ñù or by the single vector c = Œ∫Œº.\n\nThe density of the vMF distribution on Sphere(n, ùîΩ) with respect to the normalized Hausdorff measure is\n\np(x  Œº Œ∫) = fracŒ∫^(n-1)2I_(n-1)2(Œ∫) exp(Œ∫ ReŒº x))\n\nwhere  is the Frobenius inner product, and I_ŒΩ(z) is the modified Bessel function of the first kind.\n\nVonMisesFisher(M::Stiefel{n,k,ùîΩ}; F)\nVonMisesFisher(M::Stiefel{n,k,ùîΩ}; U, D, V)\nVonMisesFisher(M::Stiefel{n,k,ùîΩ}; H, P)\n\nConstruct the (Matrix) vMF distribution on the Stiefel(n,k,ùîΩ) manifold parameterized either by the matrix F  ùîΩ^n  k or by its SVD decomposition F = U D V^mathrmH for U  mathrmSt(n k) and V  mathrmO(k) or by its polar decomposition F = H P for H  mathrmSt(nkùîΩ) and Hermitian positive definite p  ùîΩ^k  k. The distribution has a mode at U V^mathrmH in the SVD parameterization and at H in the polar parameterization. However, the mode is not necessarily unique.\n\nBecause Stiefel(n, n) = \\mathrm{SO}(n), these constructors also apply to Rotations(n) and SpecialOrthogonal(n); however, in this case the normalization constant will not be correct, and this distribution is only suitable as a prior.\n\nThe density of the vMF distribution on Stiefel(n, k, ùîΩ) with respect to the normalized Hausdorff measure is\n\np(x  F) = fracexp(ReF x)_0 F_1(fracn2 frac14 F^mathrmHF)\n\nwhere _0 F_1(b B) is a hypergeometric function with matrix argument B.\n\n\n\n\n\n","category":"type"},{"location":"reference/#ManifoldMeasures.logmass","page":"Reference","title":"ManifoldMeasures.logmass","text":"logmass(Œº::AbstractMeasure)\n\nCompute the logarithm of the total mass of the measure Œº over its manifold M, that is Œº(M) = _M mathrmdŒº(x).\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = ManifoldMeasures","category":"page"},{"location":"#ManifoldMeasures","page":"Home","title":"ManifoldMeasures","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ManifoldMeasures extends Manifolds.jl to use MeasureTheory.jl to implement generic measures on manifolds as well as common specific measures, such as those that appear in directional statistics.","category":"page"},{"location":"#Goals","page":"Home","title":"Goals","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The implementations are designed with probabilistic programming in mind but are also generally useful. This includes the following goals:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Constructors should be lightweight, so that arguments are not checked, and unnecessary normalization constants are not computed.\nLog-densities should be compatible with Julia's automatic differentiation (AD) frameworks. This implies avoiding problematic patterns like try..catch blocks or mutation. When necessary or significantly more efficient, we define custom ChainRules.jl-compatible AD rules.\nLog-densities and constructors should try to be friendly for symbolic computation, which implies wrapping any control flow in functions like ifelse that can be symbolically overloaded. Note that currently we don't do any symbolic overloading.\nImplement the most general forms of measures. For example, if a complex or quaternionic generalization of a measure are known or are straightforward, then the generalization is implemented.","category":"page"}]
}
